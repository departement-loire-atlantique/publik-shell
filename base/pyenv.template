# To pass env vars to Python scripts run by Publik in services which remove custom env vars:
# https://unix.stackexchange.com/questions/44370/how-to-make-unix-service-see-environment-variables
# So we hardcode the values when the container starts

# TODO: escape quotes

DEBUG = bool('$DEBUG')
LOG_LEVEL = '$LOG_LEVEL'
LOG_CHANNEL = '$LOG_CHANNEL'

ALLOWED_HOSTS = '$ALLOWED_HOSTS'
if ALLOWED_HOSTS:
    ALLOWED_HOSTS = ALLOWED_HOSTS.split(';')
else:
    ALLOWED_HOSTS = []

DB_PORT = '$DB_PORT'

DB_HOBO_NAME = '$DB_HOBO_NAME'
DB_PASSERELLE_NAME = '$DB_PASSERELLE_NAME'
DB_COMBO_NAME = '$DB_COMBO_NAME'
DB_FARGO_NAME = '$DB_FARGO_NAME'
DB_WCS_NAME = '$DB_WCS_NAME'
DB_AUTHENTIC_NAME = '$DB_AUTHENTIC_NAME'
DB_CHRONO_NAME = '$DB_CHRONO_NAME'
DB_BIJOE_NAME = '$DB_BIJOE_NAME'

DB_HOBO_USER = '$DB_HOBO_USER'
DB_PASSERELLE_USER = '$DB_PASSERELLE_USER'
DB_COMBO_USER = '$DB_COMBO_USER'
DB_FARGO_USER = '$DB_FARGO_USER'
DB_WCS_USER = '$DB_WCS_USER'
DB_AUTHENTIC_USER = '$DB_AUTHENTIC_USER'
DB_CHRONO_USER = '$DB_CHRONO_USER'
DB_BIJOE_USER = '$DB_BIJOE_USER'

DB_HOBO_PASS = '$DB_HOBO_PASS'
DB_PASSERELLE_PASS = '$DB_PASSERELLE_PASS'
DB_COMBO_PASS = '$DB_COMBO_PASS'
DB_FARGO_PASS = '$DB_FARGO_PASS'
DB_WCS_PASS = '$DB_WCS_PASS'
DB_AUTHENTIC_PASS = '$DB_AUTHENTIC_PASS'
DB_CHRONO_PASS = '$DB_CHRONO_PASS'
DB_BIJOE_PASS = '$DB_BIJOE_PASS'

RABBITMQ_DEFAULT_USER = '$RABBITMQ_DEFAULT_USER'
RABBITMQ_DEFAULT_PASS = '$RABBITMQ_DEFAULT_PASS'
RABBITMQ_PORT = '$RABBITMQ_PORT'

ERROR_MAIL_AUTHOR = '$ERROR_MAIL_AUTHOR'
ERROR_MAIL_ADDR = '$ERROR_MAIL_ADDR'

SMTP_HOST = '$SMTP_HOST'
SMTP_USER = '$SMTP_USER'
SMTP_PASS = '$SMTP_PASS'
SMTP_PORT = '$SMTP_PORT'

CONSOLE_LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'simple': {
            'format': '[%(asctime)s] %(name)s %(levelname)s %(message)s',
            'datefmt': '%d/%b/%Y %H:%M:%S'
        },
    },
    'handlers': {
        'console': {
            'level': LOG_LEVEL,
            'filters': ['require_debug_true' if LOG_LEVEL == 'DEBUG' else 'require_debug_false'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
    },
    'loggers': {
	'':{
            'handlers': ['console'],
            'level': LOG_LEVEL
        },
    },
}


FILE_LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'simple': {
            'format': '[%(asctime)s] %(name)s %(levelname)s %(message)s',
            'datefmt': '%d/%b/%Y %H:%M:%S'
        },
    },
    'handlers': {
        'console': {
            'level': LOG_LEVEL,
            'filters': ['require_debug_true' if LOG_LEVEL == 'DEBUG' else 'require_debug_false'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': '/var/log/$APPNAME/django.log',
            'formatter': 'simple'
        },
    },
    'loggers': {
	'':{
            'handlers': ['console', 'file'],
            'level': LOG_LEVEL
        },
    },
}

LOGGING_FROM_PYENV = FILE_LOGGING if LOG_CHANNEL == 'file' else CONSOLE_LOGGING